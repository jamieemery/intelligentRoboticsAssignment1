We decided to estimate the robot's position based on a simple clustering, the result of which was keeping the particles that were closer to each other, in other words the densest set of particles.
This was done following the procedure below:
Firstly, we measured the distance between particles in our particle cloud, in pairs. This was done by taking the absolute difference of each particle's position on the map with every other particle.
The distances were stored in the "distances" set. 
Then, we sorted those distances, from the smallest to the biggest and decided to keep the first third of them and take them into account for the pose estimation.
This was done in order to exclude some outliers, as those distances would be big enough to be on the rest of the sorted set and the smallest distances should correspond to paricles that are quite close to each other, meaning that they represent a denser cloud of particles.
The next step was comparing every distance we found in the beginning with the distances in the minimum distances set ("min_dist" variable).
We defined a new array variable,"counter", which would contain the number of appearances each particle has in the pairs with the minimum distances.
That meant that if f.e the first particle of our particle cloud appeared the most times, then the densest set of particles should be all around its position.
Thus, whenever we found that a particle was a part of a pair owning one of the minimum distances, we increased its corresponding counter value.
Then, we sorted the counter array and decided to keep all particles matching with the last third of it for our wanted particle set, as that part would include the particles that had the biggest numbers of appearances.
So now that we had our "wanted_set" of particles, we could easily calculate their mean position and orientation, by accessing each of those attributes one by one.
And finally, we defined a new variable "est_pose" and assigned the computed mean position and mean orientation to it, as that was our function's outcome.